---
title: "Assignment 1"
---

# (a) 

**I was watching this video :<https://www.youtube.com/watch?v=qPk0YEKhqB8&list=PLqzoL9-eJTNBDdKgJgJzaQcY6OXmsXAHU&index=4>. It shows us how to take datas from an excel sheet. Basically to take the excel data , we need to convert the excel data into CSV ( Comma Seperated Values) or txt so that we can assign the datas by using this format :**

**data1 \<- read.csv(file.choose() , reader = TRUE or False by taking the capital )**

**and the R immediately opens a interface for you to choose the direction of the data. Afterwards you can call this data by only writing data1.**

**Also you we can use read.table or read.delim according to taken datas class.**

## (b)

**First thing I have realized was the difference of the display of python and R . The R has more complex and detailed display compared to the Python. Such as files , plots , packages , connections and background job interfaces.**

**Secondly, the syntax is different compared to python. For instance : you can not use the same "=" equality operator in R by "=" there is a difference between them . In R instead of "=" we should use "\<-" to provide exact same operation**

**Last but not least, Indentation differs. For example imagine you are trying to define a for loop in both programming language. In python the indentation level differs but in R programming the {} usage solves the indentation problem.**

# (c)

The input:

**install.packages("dslabs")**

**library(dslabs)**

**head("na_example")**

**print(na_example)**

**str(na_example) no_na_example\<-\
ifelse(is.na(na_example),0,na_example) #this code is in same line , they are attached but due to the lack of space in R there is a second paragraph**

**print(no_na_example)**

**sum(is.na(na_example))**

The output![The output](images/Screenshot_6.png)

# (d)

As you can see the (d) part has been completed :)
